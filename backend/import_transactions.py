# import_transactions.py
import json
from pymongo import MongoClient
from bson.objectid import ObjectId

# --- MongoDB Connection ---
MONGO_URI = "mongodb://localhost:27017/" # Your MongoDB connection URI
DATABASE_NAME = "finance_dashboard"
COLLECTION_NAME = "transactions"
USERS_COLLECTION_NAME = "users" # Collection where your user data is stored

# --- Path to your JSON data file ---
JSON_FILE_PATH = "transactions_data.json"

def import_data():
    client = None # Initialize client outside try block for finally
    try:
        client = MongoClient(MONGO_URI)
        db = client[DATABASE_NAME]
        transactions_collection = db[COLLECTION_NAME]
        users_collection = db[USERS_COLLECTION_NAME]

        print(f"Connected to MongoDB database: {DATABASE_NAME}")

        # --- Get a user ID to associate transactions with ---
        # Try to find an existing user to assign transactions to
        existing_user = users_collection.find_one({})
        if existing_user:
            owner_id = existing_user['_id']
            print(f"Using existing user with ID: {owner_id} for transaction ownership.")
        else:
            print("\n--- IMPORTANT ---")
            print("No users found in the 'users' collection.")
            print("Transactions must be associated with a user to appear in the dashboard.")
            print("Please register a user via the frontend (http://localhost:3000/register) and then manually provide their MongoDB _id.")
            user_id_str = input("Enter an existing MongoDB User ID to assign these transactions (e.g., 60b8d7e0f2b6c3d4e5f6a7b8): ")
            try:
                owner_id = ObjectId(user_id_str)
                # Verify if the provided ID exists as a user
                if not users_collection.find_one({'_id': owner_id}):
                    print(f"Warning: User ID '{user_id_str}' not found in the 'users' collection. Please ensure it's a valid ID.")
                    return
                print(f"Using provided user ID: {owner_id} for transaction ownership.")
            except Exception as e:
                print(f"Invalid User ID format: {e}. Please provide a valid 24-character hexadecimal string.")
                return

        # --- Load JSON data ---
        with open(JSON_FILE_PATH, 'r', encoding='utf-8') as f:
            transactions_data = json.load(f)
        print(f"Loaded {len(transactions_data)} transactions from {JSON_FILE_PATH}")

        # --- Clear existing data in the collection (Optional, but recommended for fresh import) ---
        # !!! WARNING: This will delete all existing transactions in the 'transactions' collection !!!
        # Uncomment the line below if you want to clear existing data before importing.
        # transactions_collection.delete_many({})
        # print("Cleared existing transactions in the collection.")

        # --- Prepare and insert transactions ---
        inserted_count = 0
        for item in transactions_data:
            # Map JSON fields to your backend transaction schema (ITransaction)
            # Note: _id will be generated by MongoDB unless explicitly set
            # The 'description' field is not in your JSON, so we'll construct one.
            # The 'type' field (income/expense) is derived from 'category' (Revenue/Expense).
            # The 'category' field will use the JSON's 'category' value.
            # The 'date' and 'createdAt' fields will both use the JSON's 'date'.
            # The 'status' field will be mapped from JSON values.

            transaction_type = 'income' if item['category'].lower() == 'revenue' else 'expense'
            transaction_status = item['status'].lower()
            if transaction_status == 'paid':
                transaction_status = 'completed' # Map 'Paid' to 'completed' as per frontend
            # 'pending' and 'cancelled' should map directly if present,
            # but the provided JSON only has "Paid" and "Pending"

            new_transaction = {
                "description": f"{item.get('description', '') or 'Transaction'} (ID: {item['id']}) - {item['category']}",
                "amount": float(item['amount']), # Ensure amount is a float
                "type": transaction_type,
                "category": item['category'], # Keep the original category for filtering/display
                "date": item['date'],        # ISO string as is
                "status": transaction_status,
                "createdAt": item['date'],   # Use the same date for creation timestamp
                "owner": owner_id # Associate with the selected user
            }
            # MongoDB will generate _id automatically when inserting.

            transactions_collection.insert_one(new_transaction)
            inserted_count += 1

        print(f"Successfully inserted {inserted_count} transactions.")

    except FileNotFoundError:
        print(f"Error: {JSON_FILE_PATH} not found. Please ensure the file is in the correct directory.")
    except json.JSONDecodeError:
        print(f"Error: Could not decode JSON from {JSON_FILE_PATH}. Check file for syntax errors.")
    except Exception as e:
        print(f"An unexpected error occurred: {e}")
    finally:
        if client:
            client.close()
            print("MongoDB connection closed.")

if __name__ == "__main__":
    import_data()
